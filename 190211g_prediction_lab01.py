# -*- coding: utf-8 -*-
"""190211G_Prediction_lab01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_J7qr1znYXG1F3bTI8sWctAGcP3r5auf
"""

# Commented out IPython magic to ensure Python compatibility.
from sklearn import preprocessing
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import tree
from sklearn.ensemble import RandomForestClassifier
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

labels=['label_1','label_2','label_3','label_4']
features=[f'feature_{i}' for i in range(1,257)]

train = pd.read_csv("/content/drive/MyDrive/Dataset1/train.csv")
train.head()

valid = pd.read_csv("/content/drive/MyDrive/Dataset1/valid.csv")
valid.head()

test = pd.read_csv("/content/drive/MyDrive/Dataset1/test.csv")
test.head()

from sklearn.preprocessing import StandardScaler

X_train={}
X_valid={}
y_train={}
y_valid={}

for y in labels:
  if y=='label_2':
    train_df=train.dropna()
    print(train_df)
    valid_df=valid.dropna()
  else:
    train_df=train
    valid_df=valid
  scaler=StandardScaler()

  X_train[y]=pd.DataFrame(scaler.fit_transform(train_df.drop(labels,axis=1)),columns=features)
  y_train[y]=train_df[y]
  X_valid[y]=pd.DataFrame(scaler.transform(valid_df.drop(labels,axis=1)),columns=features)
  y_valid[y]=valid_df[y]

from sklearn.svm import SVC
classifier=SVC(kernel='linear')
classifier.fit(X_train['label_1'],y_train['label_1'])

test_label1=test.copy()

test_label1=pd.DataFrame(scaler.transform(test_label1.drop(labels,axis=1)),columns=features)

y_pred=classifier.predict(test_label1)

import pandas as pd
import numpy as np

# Assuming df1 is a NumPy array
# You can convert it to a DataFrame and specify column names
df1 = pd.DataFrame(y_pred, columns=['Predicted labels before feature engineering'])  # Replace with your desired column names

df1

# Concatenate the two DataFrames vertically
merged_df = pd.concat([df1, test_label1], axis=0)

from sklearn.decomposition import PCA
pca = PCA(n_components=0.95,svd_solver='full')
pca.fit(X_train['label_1'])
X_train_trf=pd.DataFrame(pca.transform(X_train['label_1']))
X_valid_trf=pd.DataFrame(pca.transform(X_valid['label_1']))
print('Shape after PCA :',X_train_trf.shape)

classifier.fit(X_train_trf,y_train['label_1'])

from sklearn import metrics
y_pred=classifier.predict(pca.transform(X_valid['label_1']))
print(metrics.accuracy_score(y_valid['label_1'],y_pred))
print(metrics.precision_score(y_valid['label_1'],y_pred, average='weighted'))
print(metrics.recall_score(y_valid['label_1'],y_pred, average='weighted'))

transformed=pca.transform(test_label1)
transformed=pd.DataFrame(transformed)

columns=[f'new_feature_{i}' for i in range(1,68)]
transformed.columns=columns
transformed

y_pred_test1=classifier.predict(pca.transform(test_label1))

df2 = pd.DataFrame(y_pred_test1, columns=['Predicted labels after feature engineering'])

df2

df3 = pd.DataFrame(columns=['No of new features'], index=df1.index)

merged2_df = pd.concat([df1, df2,df3,transformed], axis=1)

merged2_df

merged2_df.to_csv('190211G_label_1.csv', index=False)

import numpy as np
import pandas as pd
import xgboost as xg

xgb_r = xg.XGBRegressor(objective ='reg:linear',
                  n_estimators = 10, seed = 123)
xgb_r.fit(X_train['label_2'],y_train['label_2'])

y_pred_2 = xgb_r.predict(test_label1)
df1_2 = pd.DataFrame(y_pred_2, columns=['Predicted labels before feature engineering'])

import numpy as np
from sklearn.feature_selection import SelectKBest, f_regression
selector = SelectKBest(score_func=f_regression, k=100)

# Fit the selector to your data and target
X_train_new=selector.fit_transform(X_train['label_2'],y_train['label_2'])

# Get the indices of the selected features
selected_indices = np.where(selector.get_support())[0]

# Get the names of the selected features (if you have feature names)
selected_feature_names = X_train['label_2'].columns[selected_indices]
# Print the selected feature names and their scores
xgb_r.fit(X_train_new,y_train['label_2'])

y_pred_21=xgb_r.predict(selector.transform(test_label1))
df2_2 = pd.DataFrame(y_pred_21, columns=['Predicted labels after feature engineering'])

transformed_2=selector.transform(test_label1)
transformed_2=pd.DataFrame(transformed_2)
transformed_2.columns=selected_feature_names
transformed_2

merged2_df = pd.concat([df1_2, df2_2,df3,transformed_2], axis=1)
merged2_df.to_csv('190211G_label_2.csv', index=False)

"""label 2 clasification"""

from sklearn.ensemble import RandomForestClassifier
clf=RandomForestClassifier(random_state=0)
clf.fit(X_train['label_2'],y_train['label_2'])

y_pred_22=clf.predict(test_label1)
df1_22 = pd.DataFrame(y_pred_22, columns=['Predicted labels before feature engineering'])

from sklearn.decomposition import PCA
pca_2 = PCA(n_components=0.95,svd_solver='full')
pca_2.fit(X_train['label_2'])
X_train_trf=pd.DataFrame(pca_2.transform(X_train['label_2']))
X_valid_trf=pd.DataFrame(pca_2.transform(X_valid['label_2']))
print('Shape after PCA :',X_train_trf.shape)

clf.fit(X_train_trf,y_train['label_2'])

y_pred_222=clf.predict(pca_2.transform(test_label1))
df2_22 = pd.DataFrame(y_pred_222, columns=['Predicted labels after feature engineering'])



transformed_22=pca.transform(test_label1)
transformed_22=pd.DataFrame(transformed_22)
columns=[f'new_feature_{i}' for i in range(1,68)]
transformed_22.columns=columns
transformed_22

merged3_df = pd.concat([df1_22, df2_22,df3,transformed_22], axis=1)
merged3_df.to_csv('190211G_label_2(classification).csv', index=False)

"""label 3

"""

from sklearn.ensemble import RandomForestClassifier
clf_2=RandomForestClassifier(random_state=0)
clf_2.fit(X_train['label_3'],y_train['label_3'])
y_pred=clf_2.predict(X_valid['label_3'])
print(metrics.accuracy_score(y_valid['label_3'],y_pred))
print(metrics.precision_score(y_valid['label_3'],y_pred))
print(metrics.recall_score(y_valid['label_3'],y_pred))

y_pred_3=clf_2.predict(test_label1)
df1_3 = pd.DataFrame(y_pred_3, columns=['Predicted labels before feature engineering'])

from sklearn.decomposition import PCA
pca_3 = PCA(n_components=0.96,svd_solver='full')
pca_3.fit(X_train['label_3'])
X_train_trf=pd.DataFrame(pca_3.transform(X_train['label_3']))
X_valid_trf=pd.DataFrame(pca_3.transform(X_valid['label_3']))
print('Shape after PCA :',X_train_trf.shape)
clf_2.fit(X_train_trf,y_train['label_3'])

y_pred_33=clf_2.predict(pca_3.transform(test_label1))
df2_3 = pd.DataFrame(y_pred_33, columns=['Predicted labels after feature engineering'])

transformed_3=pca_3.transform(test_label1)
transformed_3=pd.DataFrame(transformed_3)
columns=[f'new_feature_{i}' for i in range(1,74)]
transformed_3.columns=columns
transformed_3

merged4_df = pd.concat([df1_3, df2_3,df3,transformed_3], axis=1)
merged4_df.to_csv('190211G_label_3.csv', index=False)

"""label 4"""

from sklearn.svm import SVC
classifier=SVC(kernel='linear',class_weight='balanced')
classifier.fit(X_train['label_4'],y_train['label_4'])
y_pred=classifier.predict(X_valid['label_4'])
print(metrics.accuracy_score(y_valid['label_4'],y_pred))
print(metrics.precision_score(y_valid['label_4'],y_pred, average='weighted'))
print(metrics.recall_score(y_valid['label_4'],y_pred, average='weighted'))

y_pred_4=classifier.predict(test_label1)
df1_4 = pd.DataFrame(y_pred_4, columns=['Predicted labels before feature engineering'])

from sklearn.decomposition import PCA
pca_4 = PCA(n_components=0.96,svd_solver='full')
pca_4.fit(X_train['label_4'])
X_train_trf=pd.DataFrame(pca_3.transform(X_train['label_4']))
X_valid_trf=pd.DataFrame(pca_3.transform(X_valid['label_4']))
print('Shape after PCA :',X_train_trf.shape)

classifier.fit(X_train_trf,y_train['label_4'])
y_pred_44=classifier.predict(pca_4.transform(test_label1))

df2_4 = pd.DataFrame(y_pred_44, columns=['Predicted labels after feature engineering'])

transformed_4=pca_4.transform(test_label1)
transformed_4=pd.DataFrame(transformed_4)
columns=[f'new_feature_{i}' for i in range(1,74)]
transformed_4.columns=columns
transformed_4

merged5_df = pd.concat([df1_4, df2_4,df3,transformed_4], axis=1)
merged5_df.to_csv('190211G_label_4.csv', index=False)